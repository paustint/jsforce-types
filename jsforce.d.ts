/** Declaration file generated by dts-gen */
// Manually updated from automatic generation

import { EventEmitter } from 'events';

export interface UserInfo {
    id: string,
    organizationId: string,
    url: string
}

export interface UpdatedRecordsInfo {
    latestDateCovered: string,
    ids: string[]
}

export interface TokenResponse {
    access_token: string,
    refresh_token: string
}

export interface ThemeInfo {
    [key: string]: any;
 }
export interface TabsInfo {
    [key: string]: any;
 }

export interface ResolvedCallback {
    (result: any): void;
}

export interface ResolveCallback {
    (result: any): void;
}

export interface RejectedCallback {
    (reason: any): void;
}
export interface Record {
    [key: string]: any
}
export interface RecordResult {
    success: boolean,
    id?: string,
    errors?: string[]
}

export interface RecordMapFunction {
    [key: string]: any;
 }
export interface RecordFilterFunction {
    [key: string]: any;
 }
export interface QueryResult {
    done: boolean,
    nextRecordsUrl?: string,
    totalSize: number,
    records: Record[]
}
export interface DescribeSObjectResult {
    [key: string]: any;
 }
export interface DescribeGlobalResult {
    [key: string]: any;
 }
export interface DeletedRecordsInfo {
    earliestDateAvailable: string,
    latestDateCovered: string,
    deletedRecords: {id: string, deletedDate: string}[]
}
export interface CompactLayoutInfo {
    compactLayouts: any[],
    defaultCompactLayoutId: string,
    recordTypeCompactLayoutMappings: any[]
}
export interface PromiseCallback { 
    (resolve: ResolveCallback<T>, reject: RejectedCallback): void; 
}
export interface Callback<T> {
    (err: Error, response: T): void;
}
export interface LimitsInfo {
    [key: string]: any;
}
export interface LayoutInfo {
    layouts: any[],
    recordTypeMappings: any[]
 }
export interface ApprovalLayoutInfo {
    approvalLayouts: any[]
 }

export class Connection extends EventEmitter {
    // http://jsforce.github.io/jsforce/doc/Connection.html
    constructor(options: {  oauth2: oauth2|any,
                            logLevel: string,
                            version: string,
                            maxRequest: number,
                            loginUrl: string,
                            instanceUrl: string,
                            serverUrl: string,
                            accessToken: string,
                            sessionId: string,
                            refreshToken: string,
                            signedRequest: string|any,
                            proxyUrl: string,
                            callOptions: any });
    authorize(code: string, callback: Callback<UserInfo>): Promise<UserInfo>;
    create(type: string, records: Record | Record[], options: any, callback: Callback<RecordResult | RecordResult[]>): Promise<RecordResult | RecordResult[]>;
    del(type: string, ids: string | string[], options: any, callback: Callback<RecordResult | RecordResult[]>): Promise<RecordResult | RecordResult[]>;
    delete(type: string, ids: string | string[], options: any, callback: Callback<RecordResult | RecordResult[]>): Promise<RecordResult | RecordResult[]>;
    deleted(type: string, start: string | Date, end: string | Date, callback: Callback<DeletedRecordsInfo>): Promise<DeletedRecordsInfo>;
    describe(type: string, callback: Callback<DescribeSObjectResult>): Promise<DescribeSObjectResult>;
    describeGlobal(callback: Callback<DescribeGlobalResult>): Promise<DescribeGlobalResult>;
    describeSObject(type: string, callback: Callback<DescribeSObjectResult>): Promise<DescribeSObjectResult>;
    destroy(type: string, ids: string | string[], options: any, callback: Callback<RecordResult | RecordResult[]>): Promise<RecordResult | RecordResult[]>;
    identity(options: any, callback: Callback<any>): Promise<any>;
    protected initialize(options: {
        instanceUrl?: string,
        serverUrl?: string,
        accessToken?: string,
        sessionId?: string,
        refreshToken?: string,
        signedRequest?: string | any,
        userInfo?: userInfo,
    }): void;
    insert(type: string, records: any[] | any, options: any, callback: Callback<RecordResult | RecordResult[]>): Promise<RecordResult | RecordResult[]>;
    limits(callback: Callback<LimitsInfo>): Promise<LimitsInfo>;
    login(username: string, password: string, callback: Callback<UserInfo>): Promise<UserInfo>;
    loginByOAuth2(username: string, password: string, callback: Callback<UserInfo>): Promise<UserInfo>;
    loginBySoap(username: string, password: string, callback: Callback<UserInfo>): Promise<UserInfo>;
    logout(callback: Callback<undefined>): Promise<undefined>;
    logoutByOAuth2(callback: Callback<undefined>): Promise<undefined>;
    logoutBySoap(callback: Callback<undefined>): Promise<undefined>;
    query(soql: string, options: any, callback: Callback<QueryResult>): Promise<QueryResult>;
    queryAll(soql: string, options: any, callback: Callback<QueryResult>): Promise<QueryResult>;
    queryMore(locator: any, options: any, callback: Callback<QueryResult>): Promise<QueryResult>;
    quickAction(actionName: string): QuickAction;
    quickActions(callback: Callback<QuickActionInfo[]>): Promise<QuickActionInfo[]>;
    recent(type: string, limit: number, callback: Callback<RecordResult[]>): Promise<RecordResult[]>;
    request(request: string | {method: string, url: string, headers?: any}, options: any, callback: Callback<any>): Promise<any>;
    requestDelete(url: string, options: any, callback: Callback<any>): Promise<any>;
    requestGet(url: string, options: any, callback: Callback<any>): Promise<any>;
    requestPatch(url: string, body: any, options: any, callback: Callback<any>): Promise<any>;
    requestPost(url: string, body: any, options: any, callback: Callback<any>): Promise<any>;
    requestPut(url: string, body: any, options: any, callback: Callback<any>): Promise<any>;
    retrieve(type: string, ids: string | string[], options: any, callback: Callback<Record> | Record[]): Promise<Record | Record[]>;
    search(sosl: any, callback: Callback<RecordResult[]>): Promise<RecordResult[]>;
    sobject(type: string): SObject;
    tabs(callback: Callback<TabsInfo>): Promise<TabsInfo>;
    theme(callback: Callback<ThemeInfo>): Promise<ThemeInfo>;
    update(type: string, records: Record | Record[], options: any, callback: Callback<RecordResult | RecordResult[]>): Promise<RecordResult | RecordResult[]>;
    updated(type: string, start: string | Date, end: string | Date, callback: Callback<UpdatedRecordsInfo>): Promise<UpdatedRecordsInfo>;
    upsert(type: string, records: Record | Record[], extIdField: string, options: any, callback: Callback<RecordResult | RecordResult[]>): Promise<RecordResult | RecordResult[]>;
}

protected interface QuickAction {
    // Add Methods here
    // http://jsforce.github.io/jsforce/doc/QuickAction.html
}

export class QuickActionInfo implements QuickAction {
    type: string;
    name: string;
    label: string;
    urls: any;
}

export class SObject {
    // add methods
    // http://jsforce.github.io/jsforce/doc/SObject.html
}

export class Date {
    constructor(literal: any);
    toJSON(): string;
    toString(): string;
    static LAST_N_DAYS(num: any): any;
    static LAST_N_FISCAL_QUARTERS(num: any): any;
    static LAST_N_FISCAL_YEARS(num: any): any;
    static LAST_N_MONTHS(num: any): any;
    static LAST_N_QUARTERS(num: any): any;
    static LAST_N_WEEKS(num: any): any;
    static LAST_N_YEARS(num: any): any;
    static NEXT_N_DAYS(num: any): any;
    static NEXT_N_FISCAL_QUARTERS(num: any): any;
    static NEXT_N_FISCAL_YEARS(num: any): any;
    static NEXT_N_MONTHS(num: any): any;
    static NEXT_N_QUARTERS(num: any): any;
    static NEXT_N_WEEKS(num: any): any;
    static NEXT_N_YEARS(num: any): any;
    static parseDate(str: any): any;
    static toDateLiteral(date: any): any;
    static toDateTimeLiteral(date: any): any;
}
export class OAuth2 {
    constructor(options: any);
    authenticate(username: string, password: string, callback: any): any;
    getAuthorizationUrl(params: any): any;
    refreshToken(refreshToken: string, callback: any): any;
    requestToken(code: string, callback: any): any;
    revokeToken(accessToken: string, callback: any): any;
}
export class Promise {
    constructor(fn: any);
    catch(onRejected: any): any;
    fail(onRejected: any): any;
    then(onFulfilled: any, onRejected: any): any;
    thenCall(callback: any): any;
    static all(arr: any): any;
    static defer(): any;
    static race(values: any): any;
    static reject(value: any): any;
    static resolve(value: any): any;
}
export class RecordStream {
    constructor();
    filter(fn: any): any;
    map(fn: any): any;
    static DataStreamConverters: {
        csv: {
            parse: any;
            serialize: any;
        };
    };
    static filter(fn: any): any;
    static map(fn: any): any;
    static recordMapStream(record: any, noeval: any): any;
}
export class SfDate {
    constructor(literal: any);
    toJSON(): string;
    toString(): string;
    static LAST_N_DAYS(num: any): any;
    static LAST_N_FISCAL_QUARTERS(num: any): any;
    static LAST_N_FISCAL_YEARS(num: any): any;
    static LAST_N_MONTHS(num: any): any;
    static LAST_N_QUARTERS(num: any): any;
    static LAST_N_WEEKS(num: any): any;
    static LAST_N_YEARS(num: any): any;
    static NEXT_N_DAYS(num: any): any;
    static NEXT_N_FISCAL_QUARTERS(num: any): any;
    static NEXT_N_FISCAL_YEARS(num: any): any;
    static NEXT_N_MONTHS(num: any): any;
    static NEXT_N_QUARTERS(num: any): any;
    static NEXT_N_WEEKS(num: any): any;
    static NEXT_N_YEARS(num: any): any;
    static parseDate(str: any): any;
    static toDateLiteral(date: any): any;
    static toDateTimeLiteral(date: any): any;
}
export const VERSION: string;
export const domain: any;
export function addListener(type: string, listener: any): any;
export function emit(type: string, ...args: any[]): any;
export function eventNames(): any;
export function getMaxListeners(): any;
export function listenerCount(type: string): any;
export function listeners(type: string): any;
export function on(type: string, listener: any): any;
export function once(type: string, listener: any): any;
export function prependListener(type: string, listener: any): any;
export function prependOnceListener(type: string, listener: any): any;
export function removeAllListeners(type: string, ...args: any[]): any;
export function removeListener(type: string, listener: any): any;
export function require(name: any): any;
export function setMaxListeners(n: any): any;
export namespace Date {
    namespace LAST_90_DAYS {
        function toJSON(): string;
        function toString(): string;
    }
    namespace LAST_FISCAL_QUARTER {
        function toJSON(): string;
        function toString(): string;
    }
    namespace LAST_FISCAL_YEAR {
        function toJSON(): string;
        function toString(): string;
    }
    namespace LAST_MONTH {
        function toJSON(): string;
        function toString(): string;
    }
    namespace LAST_QUARTER {
        function toJSON(): string;
        function toString(): string;
    }
    namespace LAST_WEEK {
        function toJSON(): string;
        function toString(): string;
    }
    namespace LAST_YEAR {
        function toJSON(): string;
        function toString(): string;
    }
    namespace NEXT_90_DAYS {
        function toJSON(): string;
        function toString(): string;
    }
    namespace NEXT_FISCAL_QUARTER {
        function toJSON(): string;
        function toString(): string;
    }
    namespace NEXT_FISCAL_YEAR {
        function toJSON(): string;
        function toString(): string;
    }
    namespace NEXT_MONTH {
        function toJSON(): string;
        function toString(): string;
    }
    namespace NEXT_QUARTER {
        function toJSON(): string;
        function toString(): string;
    }
    namespace NEXT_WEEK {
        function toJSON(): string;
        function toString(): string;
    }
    namespace NEXT_YEAR {
        function toJSON(): string;
        function toString(): string;
    }
    namespace THIS_FISCAL_QUARTER {
        function toJSON(): string;
        function toString(): string;
    }
    namespace THIS_FISCAL_YEAR {
        function toJSON(): string;
        function toString(): string;
    }
    namespace THIS_MONTH {
        function toJSON(): string;
        function toString(): string;
    }
    namespace THIS_QUARTER {
        function toJSON(): string;
        function toString(): string;
    }
    namespace THIS_WEEK {
        function toJSON(): string;
        function toString(): string;
    }
    namespace THIS_YEAR {
        function toJSON(): string;
        function toString(): string;
    }
    namespace TODAY {
        function toJSON(): string;
        function toString(): string;
    }
    namespace TOMORROW {
        function toJSON(): string;
        function toString(): string;
    }
    namespace YESTERDAY {
        function toJSON(): string;
        function toString(): string;
    }
}
export namespace RecordStream {
    class Parsable {
        constructor();
        addListener(ev: any, fn: any): any;
        on(ev: any, fn: any): any;
        stream(type: string, options: any): any;
    }
    class Serializable {
        constructor();
        stream(type: string, options: any): any;
    }
}
export namespace SfDate {
    namespace LAST_90_DAYS {
        function toJSON(): string;
        function toString(): string;
    }
    namespace LAST_FISCAL_QUARTER {
        function toJSON(): string;
        function toString(): string;
    }
    namespace LAST_FISCAL_YEAR {
        function toJSON(): string;
        function toString(): string;
    }
    namespace LAST_MONTH {
        function toJSON(): string;
        function toString(): string;
    }
    namespace LAST_QUARTER {
        function toJSON(): string;
        function toString(): string;
    }
    namespace LAST_WEEK {
        function toJSON(): string;
        function toString(): string;
    }
    namespace LAST_YEAR {
        function toJSON(): string;
        function toString(): string;
    }
    namespace NEXT_90_DAYS {
        function toJSON(): string;
        function toString(): string;
    }
    namespace NEXT_FISCAL_QUARTER {
        function toJSON(): string;
        function toString(): string;
    }
    namespace NEXT_FISCAL_YEAR {
        function toJSON(): string;
        function toString(): string;
    }
    namespace NEXT_MONTH {
        function toJSON(): string;
        function toString(): string;
    }
    namespace NEXT_QUARTER {
        function toJSON(): string;
        function toString(): string;
    }
    namespace NEXT_WEEK {
        function toJSON(): string;
        function toString(): string;
    }
    namespace NEXT_YEAR {
        function toJSON(): string;
        function toString(): string;
    }
    namespace THIS_FISCAL_QUARTER {
        function toJSON(): string;
        function toString(): string;
    }
    namespace THIS_FISCAL_YEAR {
        function toJSON(): string;
        function toString(): string;
    }
    namespace THIS_MONTH {
        function toJSON(): string;
        function toString(): string;
    }
    namespace THIS_QUARTER {
        function toJSON(): string;
        function toString(): string;
    }
    namespace THIS_WEEK {
        function toJSON(): string;
        function toString(): string;
    }
    namespace THIS_YEAR {
        function toJSON(): string;
        function toString(): string;
    }
    namespace TODAY {
        function toJSON(): string;
        function toString(): string;
    }
    namespace TOMORROW {
        function toJSON(): string;
        function toString(): string;
    }
    namespace YESTERDAY {
        function toJSON(): string;
        function toString(): string;
    }
}
export namespace registry {
    function getClient(name: any): any;
    function getClientNames(): any;
    function getConnection(name: any): any;
    function getConnectionConfig(name: any): any;
    function getConnectionNames(): any;
    function registerClient(name: any, clientConfig: any): void;
    function removeConnectionConfig(name: any): void;
    function saveConnectionConfig(name: any, connConfig: any): void;
    function setDefaultConnection(name: any): void;
}
